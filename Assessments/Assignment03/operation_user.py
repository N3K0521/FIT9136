"""
Creation Date: 1st June 2023
Last Modified Date: 3rd June 2023

Student Name: Huixin Wang
Student ID: 31552544
"""

import random
from model_customer import Customer
from model_admin import Admin

class UserOperation:
    """
    Contains all the operations related to a user

    Methods
    -------
    generate_unique_user_id():
        Generate and return a 10-digit unique user id starting with 'u_'
        every time when a new user is registered
    encrypt_password():
        Encode a user-provided password
    decrypt_password():
        Decode the encrypted password with a simialr rule as the encryption
        method
    check_username_exist():
        Verify whether a user is already registered or exists in the system
    validate_username():
        Validate the user's name. The name should only contain letters or
        underscores, and its length should be at least 5 characters
    validate_password():
        Validate the user's password. The password should contain at least
        one letter (this letter can be either uppercase or lowercase) and one
        number. The length of the password must be greater than or equal to
        5 characters.
    login():
        Verify the provided user’s name and password combination against
        stored user data to determine the authorization status for accessing
        the system.
    parse_user_from_userinfo_dict():
        Transfer the dictionary object to the matching User object
    """
    def generate_unique_user_id(self):
        """
        This method is used to generate and return a 10-digit unique user id
        starting with ‘u_’ every time when a new user is registered.

        :return: a string value in the format 'u_10digits', where 'u' is a
                 prefix and it is followed by a underscore and a 10-digit
                 numerical value. For example, the returned string will follow
                 the pattern 'u_1234567890'.
        """
        # store as a dictionary
        # eval() -> string to dict -> in order to get user_id
        with open('./data/users.txt', 'r', encoding='utf-8') as f:
            user_ids = [eval(line.replace('\n', '')).get('user_id') for line in f.readlines()]
        # set the max to be 16 (including an admin)
        # max: 15 customers
        if len(user_ids) >= 16:
            return None
        while True:
            # randomly generated -> 10 digits, insert 0 at the front
            u_id = f'u_{random.randint(0, 9999999999):010d}'
            if u_id not in user_ids:
                return u_id

    def encrypt_password(self, user_password):
        """
        Encode a user-provided password.
        Encryption steps:
        1. Generate a random string with a length equal to two times
            the length of the user-provided password. The random string
            should consist of characters chosen from a set of 26
            lowercase letters, 26 uppercase letters, and 10 digits (i.e.,
            a-zA-Z0-9).
        2. Combine the random string and the input password text to
            create an encrypted password, following the rule of selecting
            two letters sequentially from the random string and
            appending one letter from the input password. This process is
            repeated until all the characters in the user-provided
            password are encrypted. Finally, add "^^" at the beginning
            and "$$" at the end of the encrypted password to indicate its
            beginning and ending respectively.

        Example:
        User provided password: “admin1”
        Generated random string: “qwyroioadfbh”
        Encrypted password: “^^qwayrdoimoaidfnbh1$$”

        User provided password: “FIT9136”
        Generated random string: “q0FuYI67Tf395n1fi3PA6”
        Encrypted password: “^^q0FuYI67Tf395n1fi3PA6$$”

        :param user_password: str
            a string generated and input by the user
        :return: str
            a string that stores the encrypted user_password
        """

        # Get all characters that can be used for encryption
        characters = 'abcdefghijklmnopqrstuvwxyz'
        characters += characters.upper() + '0123456789'
        # random.choices
        # Randomly select a list of length k (repeated) -> join as a string
        random_string = ''.join(random.choices(characters, k=len(user_password) * 2))
        encrypted_password = ''
        # add "^^" at the beginning
        # and "$$" at the end
        for i in range(len(user_password)):
            encrypted_password += (random_string[2 * i: 2 * (i + 1)] + user_password[i])
        return '^^' + encrypted_password + '$$'

    def decrypt_password(self, encrypted_password):
        """
        Decode the encrypted password with a similar rule as the encryption method
        :param encrypted_password: str
            the encrypted password generated by the function encrypt_password()
        :return: str
            the decrypted password
        """
        # decode -> firstly remove the ^^ $$
        encrypted_password = encrypted_password[2: -2]
        user_provided_password = ''
        # Extract a character from every three characters
        for i in range(len(encrypted_password) // 3):
            user_provided_password += encrypted_password[3 * i + 2]
        return user_provided_password

    def check_username_exist(self, user_name):
        """
        Verify whether a user is already registered or exists in the system
        :param user_name: str
            input user's name
        :return: True(exist) / False(not exist)
            Return true if the user is stored, else return false
        """
        with open('./data/users.txt', 'r', encoding='utf-8') as f:
            # for line in f == for line in f.readlines()，but is more efficient
            for line in f:
                # dict -> get the key value
                user_dict = eval(line.replace('\n', ''))
                if user_name == user_dict.get('user_name'):
                    return True
            return False

    def validate_username(self, user_name):
        """
        Validate the user's name. The name should only contain letters or underscores,
        and its length should be at least 5 characters
        :param user_name: str
            a string store the user's name
        :return: True/False boolean
            return True if the user's name is validated, else return False
        """
        # length at least 5 characters
        if len(user_name) < 5:
            return False
        for char in user_name:
            if not char.isalpha() and char != '_':
                return False
        return True

    def validate_password(self, user_password):
        """
        Validate the user's password. The password should contain at least
        one letter (this letter can be either uppercase or lowercase) and one
        number. The length of the password must be greater than or equal to
        5 characters.

        :param user_password: str
            a string contains the user's input password
        :return: boolean True/False
            return True if the password meets requirements, else return False
        """

        # length must be greater than or equal to 5 char (!<5)
        if len(user_password) < 5:
            return False
        has_letter = False
        has_number = False
        # check each character
        for char in user_password:
            if char.isalpha():
                has_letter = True
            if char.isdigit():
                has_number = True
            if has_letter and has_number:
                return True
        return False

    def login(self, user_name, user_password):
        """
        Verify the provided user’s name and password combination against
        stored user data to determine the authorization status for accessing
        the system.

        :param user_name: str
            input username
        :param user_password: str
            input password
        :return: A Customer/Admin object
        """
        with open('./data/users.txt', 'r', encoding='utf-8') as f:
            for line in f:
                user_dict = eval(line.replace('\n', ''))
                if user_dict['user_name'] == user_name and self.decrypt_password(user_dict['user_password']) == user_password:
                    return self.parse_user_from_userinfo_dict(user_dict)
            return None

    def parse_user_from_userinfo_dict(self, user_dict):
        """
        Transfer the dictionary object to the matching User object
        :param user_dict: dict
            a dictionary stores all the user information
        :return: user object
            the matching user object
        """
        if user_dict['user_role'] == 'admin':
            return Admin(user_dict['user_id'], user_dict['user_name'], user_dict['user_password'],
                         user_dict['user_register_time'], user_dict['user_role'])
        elif user_dict['user_role'] == 'customer':
            return Customer(user_dict['user_id'], user_dict['user_name'], user_dict['user_password'],
                            user_dict['user_register_time'], user_dict['user_role'], user_dict['user_email'],
                            user_dict['user_mobile'])
        return None



